const { Telegraf, Markup } = require('telegraf');
const axios = require('axios');
const sqlite3 = require('sqlite3').verbose();
const path = require('path');

const BOT_TOKEN = '8206130580:AAG91R9Bnp2pYG0z9v1eRJmH8oZvThsN9eA';
const API_URL = 'https://telegram-community1-production.up.railway.app/api'; // URL –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
const ADMIN_ID = 8036875641;

const bot = new Telegraf(BOT_TOKEN);
const dbPath = path.join(__dirname, 'bot_database.db');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–æ—Ç–∞
const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞:', err.message);
        return;
    }
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞');
    initBotDatabase();
});

function initBotDatabase() {
    db.serialize(() => {
        // –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –±–æ–Ω—É—Å–æ–≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        db.run(`CREATE TABLE IF NOT EXISTS welcome_bonuses (
            user_id INTEGER PRIMARY KEY,
            bonus_received BOOLEAN DEFAULT 0,
            received_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )`);
        
        // –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
        db.run(`CREATE TABLE IF NOT EXISTS referral_bonuses (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            referrer_id INTEGER NOT NULL,
            referred_id INTEGER NOT NULL,
            bonus_paid BOOLEAN DEFAULT 0,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )`);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
function getMoscowTime() {
    return new Date().toLocaleString("ru-RU", { timeZone: "Europe/Moscow" });
}

// –ì–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /start
bot.start(async (ctx) => {
    const userId = ctx.from.id;
    const firstName = ctx.from.first_name;
    const lastName = ctx.from.last_name || '';
    const username = ctx.from.username || `user_${userId}`;
    const startPayload = ctx.startPayload; // –ü–∞—Ä–∞–º–µ—Ç—Ä –ø–æ—Å–ª–µ start (—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞)
    
    console.log(`üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º: ${startPayload}`);
    
    try {
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
        const userData = {
            id: userId,
            first_name: firstName,
            last_name: lastName,
            username: username,
            photo_url: ''
        };
        
        // 1. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
        const authResponse = await axios.post(`${API_URL}/user/auth`, {
            user: userData
        });
        
        if (!authResponse.data.success) {
            throw new Error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ');
        }
        
        let welcomeBonusGiven = false;
        let referralBonusGiven = false;
        let referrerId = null;
        
        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (5 –∑–≤—ë–∑–¥)
        const hasWelcomeBonus = await checkWelcomeBonus(userId);
        if (!hasWelcomeBonus) {
            await giveWelcomeBonus(userId);
            welcomeBonusGiven = true;
            console.log(`üéÅ –ù–∞—á–∏—Å–ª–µ–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
        }
        
        // 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
        if (startPayload && startPayload.startsWith('ref_')) {
            referrerId = startPayload.replace('ref_', '');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Å–≤–æ—é –∂–µ —Å—Å—ã–ª–∫—É
            if (parseInt(referrerId) !== userId) {
                const referralResult = await processReferralBonus(referrerId, userId);
                referralBonusGiven = referralResult.success;
                
                if (referralBonusGiven) {
                    console.log(`üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –Ω–∞—á–∏—Å–ª–µ–Ω: ${referrerId} -> ${userId}`);
                }
            }
        }
        
        // 4. –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const welcomeMessage = buildWelcomeMessage(firstName, welcomeBonusGiven, referralBonusGiven, referrerId);
        
        // 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await ctx.reply(welcomeMessage, {
            parse_mode: 'HTML',
            ...Markup.inlineKeyboard([
                [Markup.button.url('üöÄ –ù–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å', `https://t.me/LinkGoldMoney_bot/app`)],
                [Markup.button.callback('üë• –ú–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞', 'get_referral_link')],
                [Markup.button.callback('üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å', 'check_balance')]
            ])
        });
        
        // 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        setTimeout(async () => {
            await ctx.reply(
                `üí° <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å?</b>\n\n` +
                `1. <b>–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</b> - –Ω–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å"\n` +
                `2. <b>–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è</b> - –ø–æ–¥–ø–∏—Å–∫–∏, –ª–∞–π–∫–∏, —Ä–µ–ø–æ—Å—Ç—ã\n` +
                `3. <b>–ü–æ–ª—É—á–∞–π—Ç–µ –≤—ã–ø–ª–∞—Ç—ã</b> - –æ—Ç 50 —Ä—É–±–ª–µ–π –Ω–∞ –∫–∞—Ä—Ç—É\n\n` +
                `üéÅ <b>–ë–æ–Ω—É—Å—ã:</b>\n` +
                `‚Ä¢ +5 –∑–≤—ë–∑–¥ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n` +
                `‚Ä¢ +15 –∑–≤—ë–∑–¥ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞\n` +
                `‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤`,
                { parse_mode: 'HTML' }
            );
        }, 1000);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /start:', error);
        await ctx.reply(
            'üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
            Markup.inlineKeyboard([
                Markup.button.url('üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'https://t.me/linkgold_support')
            ])
        );
    }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ–Ω—É—Å–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
function checkWelcomeBonus(userId) {
    return new Promise((resolve, reject) => {
        db.get("SELECT bonus_received FROM welcome_bonuses WHERE user_id = ?", [userId], (err, row) => {
            if (err) {
                reject(err);
                return;
            }
            resolve(row ? row.bonus_received : false);
        });
    });
}

// –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
async function giveWelcomeBonus(userId) {
    return new Promise(async (resolve, reject) => {
        try {
            // –ù–∞—á–∏—Å–ª—è–µ–º 5 –∑–≤—ë–∑–¥ —á–µ—Ä–µ–∑ API
            const bonusResponse = await axios.post(`${API_URL}/user/bonus/welcome`, {
                userId: userId,
                amount: 5
            });
            
            if (bonusResponse.data.success) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –±–æ—Ç–∞
                db.run("INSERT OR REPLACE INTO welcome_bonuses (user_id, bonus_received) VALUES (?, 1)", [userId], (err) => {
                    if (err) {
                        reject(err);
                        return;
                    }
                    resolve(true);
                });
            } else {
                reject(new Error('–û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ —á–µ—Ä–µ–∑ API'));
            }
        } catch (error) {
            reject(error);
        }
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
async function processReferralBonus(referrerId, referredId) {
    return new Promise(async (resolve, reject) => {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª
            db.get("SELECT * FROM referral_bonuses WHERE referred_id = ?", [referredId], async (err, existing) => {
                if (err) {
                    reject(err);
                    return;
                }
                
                if (existing) {
                    resolve({ success: false, message: '–†–µ—Ñ–µ—Ä–∞–ª —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' });
                    return;
                }
                
                // –ù–∞—á–∏—Å–ª—è–µ–º 15 –∑–≤—ë–∑–¥ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É
                const referrerBonusResponse = await axios.post(`${API_URL}/user/bonus/referral`, {
                    userId: referrerId,
                    referredId: referredId,
                    amount: 15
                });
                
                // –ù–∞—á–∏—Å–ª—è–µ–º 5 –∑–≤—ë–∑–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–º—É (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º)
                const referredBonusResponse = await axios.post(`${API_URL}/user/bonus/welcome`, {
                    userId: referredId,
                    amount: 5
                });
                
                if (referrerBonusResponse.data.success && referredBonusResponse.data.success) {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –±–æ—Ç–∞
                    db.run("INSERT INTO referral_bonuses (referrer_id, referred_id, bonus_paid) VALUES (?, ?, 1)", 
                        [referrerId, referredId], (err) => {
                            if (err) {
                                reject(err);
                                return;
                            }
                            resolve({ success: true, message: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã' });
                        });
                } else {
                    resolve({ success: false, message: '–û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤' });
                }
            });
        } catch (error) {
            reject(error);
        }
    });
}

// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
function buildWelcomeMessage(firstName, welcomeBonusGiven, referralBonusGiven, referrerId) {
    let message = `üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${firstName}!</b>\n\n`;
    
    if (welcomeBonusGiven) {
        message += `üéÅ <b>–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å: 5 –∑–≤—ë–∑–¥!</b>\n`;
    }
    
    if (referralBonusGiven) {
        message += `ü§ù <b>–í—ã –ø—Ä–∏—à–ª–∏ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é –¥—Ä—É–≥–∞!</b>\n`;
        message += `üí´ <b>–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ 5 –∑–≤—ë–∑–¥!</b>\n`;
        message += `üéØ <b>–í–∞—à –¥—Ä—É–≥ –ø–æ–ª—É—á–∏–ª 15 –∑–≤—ë–∑–¥ –∑–∞ –≤–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!</b>\n`;
    }
    
    message += `\nüí∞ <b>–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> ${welcomeBonusGiven ? '5' : '0'} ‚≠ê\n\n`;
    message += `üöÄ <b>LinkGold</b> - –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–¥–∞–Ω–∏–π!\n\n`;
    message += `üíé <b>–ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç:</b>\n`;
    message += `‚Ä¢ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –æ–ø–ª–∞—Ç—É\n`;
    message += `‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã\n`;
    message += `‚Ä¢ –í—ã–≤–æ–¥–∏—Ç–µ –¥–µ–Ω—å–≥–∏ —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º\n`;
    
    return message;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞"
bot.action('get_referral_link', async (ctx) => {
    const userId = ctx.from.id;
    const referralLink = `https://t.me/LinkGoldMoney_bot?start=ref_${userId}`;
    
    await ctx.answerCbQuery();
    await ctx.reply(
        `üë• <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞</b>\n\n` +
        `–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ <b>15 –∑–≤—ë–∑–¥</b> –∑–∞ –∫–∞–∂–¥–æ–≥–æ!\n\n` +
        `<code>${referralLink}</code>\n\n` +
        `üí´ <b>–í–∞—à –¥—Ä—É–≥ –ø–æ–ª—É—á–∏—Ç:</b>\n` +
        `‚Ä¢ +5 –∑–≤—ë–∑–¥ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n` +
        `‚Ä¢ +5 –∑–≤—ë–∑–¥ –∑–∞ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ\n` +
        `‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –≤—Å–µ–º –∑–∞–¥–∞–Ω–∏—è–º\n\n` +
        `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n` +
        `–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: 0 –¥—Ä—É–∑–µ–π\n` +
        `–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: 0 –∑–≤—ë–∑–¥`,
        {
            parse_mode: 'HTML',
            ...Markup.inlineKeyboard([
                [Markup.button.callback('üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É', 'copy_referral_link')],
                [Markup.button.url('üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', `https://t.me/LinkGoldMoney_bot/app`)]
            ])
        }
    );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É"
bot.action('copy_referral_link', async (ctx) => {
    const userId = ctx.from.id;
    const referralLink = `https://t.me/LinkGoldMoney_bot?start=ref_${userId}`;
    
    await ctx.answerCbQuery('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞! ‚úÖ');
    await ctx.reply(
        `üîó <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n` +
        `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—ë –¥—Ä—É–∑—å—è–º:\n\n` +
        `<code>${referralLink}</code>`,
        { parse_mode: 'HTML' }
    );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–π –±–∞–ª–∞–Ω—Å"
bot.action('check_balance', async (ctx) => {
    const userId = ctx.from.id;
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
        const userResponse = await axios.get(`${API_URL}/user/${userId}`);
        
        if (userResponse.data.success) {
            const user = userResponse.data.profile;
            const balance = user.balance || 0;
            
            await ctx.answerCbQuery();
            await ctx.reply(
                `üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å</b>\n\n` +
                `üèÜ <b>${balance} ‚≠ê</b>\n\n` +
                `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n` +
                `‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: ${user.tasks_completed || 0}\n` +
                `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: ${user.active_tasks || 0}\n` +
                `‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–∞: ${user.quality_rate || 0}%\n\n` +
                `üí∏ <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥:</b> 50 –∑–≤—ë–∑–¥`,
                {
                    parse_mode: 'HTML',
                    ...Markup.inlineKeyboard([
                        [Markup.button.url('üöÄ –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞–Ω–∏—è–º', `https://t.me/LinkGoldMoney_bot/app`)],
                        [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'check_balance')]
                    ])
                }
            );
        } else {
            throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞:', error);
        await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ üòî');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /profile
bot.command('profile', async (ctx) => {
    const userId = ctx.from.id;
    const firstName = ctx.from.first_name;
    
    try {
        const userResponse = await axios.get(`${API_URL}/user/${userId}`);
        
        if (userResponse.data.success) {
            const user = userResponse.data.profile;
            const referralLink = `https://t.me/LinkGoldMoney_bot?start=ref_${userId}`;
            
            await ctx.reply(
                `üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å ${firstName}</b>\n\n` +
                `üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> ${user.balance || 0} ‚≠ê\n` +
                `üèÜ <b>–£—Ä–æ–≤–µ–Ω—å:</b> ${user.level || 0}\n` +
                `‚úÖ <b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π:</b> ${user.tasks_completed || 0}\n` +
                `üìä <b>–ö–∞—á–µ—Å—Ç–≤–æ:</b> ${user.quality_rate || 0}%\n\n` +
                `üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:</b>\n` +
                `–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${user.referral_count || 0} –¥—Ä—É–∑–µ–π\n` +
                `–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${user.referral_earned || 0} ‚≠ê\n\n` +
                `üîó <b>–í–∞—à–∞ —Å—Å—ã–ª–∫–∞:</b>\n` +
                `<code>${referralLink}</code>`,
                {
                    parse_mode: 'HTML',
                    ...Markup.inlineKeyboard([
                        [Markup.button.url('üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', `https://t.me/LinkGoldMoney_bot/app`)],
                        [Markup.button.callback('üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', 'get_referral_link')],
                        [Markup.button.callback('üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å', 'check_balance')]
                    ])
                }
            );
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
        await ctx.reply('üòî –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.command('help', (ctx) => {
    ctx.reply(
        `üÜò <b>–ü–æ–º–æ—â—å –ø–æ LinkGold</b>\n\n` +
        `<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n` +
        `/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n` +
        `/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n` +
        `/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n` +
        `<b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å?</b>\n` +
        `1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n` +
        `2. –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è\n` +
        `3. –ü–æ–ª—É—á–∞–π—Ç–µ –æ–ø–ª–∞—Ç—É\n\n` +
        `<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>\n` +
        `–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å @linkgold_support`,
        { parse_mode: 'HTML' }
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', (ctx) => {
    const message = ctx.message.text;
    
    if (message.includes('–ø—Ä–∏–≤–µ—Ç') || message.includes('–Ω–∞—á–∞—Ç—å') || message.includes('—Å—Ç–∞—Ä—Ç')) {
        ctx.reply(
            'üëã –ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞!',
            Markup.inlineKeyboard([
                Markup.button.url('üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', `https://t.me/LinkGoldMoney_bot/app`)
            ])
        );
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from?.id}:`, err);
    ctx.reply('üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => {
    console.log('ü§ñ –ë–æ—Ç LinkGold –∑–∞–ø—É—â–µ–Ω!');
    console.log(`‚è∞ –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è: ${getMoscowTime()}`);
});

// –≠–ª–µ–≥–∞–Ω—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
process.once('SIGINT', () => {
    bot.stop('SIGINT');
    db.close();
});
process.once('SIGTERM', () => {
    bot.stop('SIGTERM');
    db.close();
});