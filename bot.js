const TelegramBot = require('node-telegram-bot-api');
const sqlite3 = require('sqlite3').verbose();
const path = require('path');

// –¢–æ–∫–µ–Ω –±–æ—Ç–∞ - –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à
const BOT_TOKEN = 'YOUR_BOT_TOKEN_HERE';
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –±–æ–Ω—É—Å–æ–≤
const db = new sqlite3.Database(path.join(__dirname, 'bot_database.db'));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã
db.serialize(() => {
    db.run(`CREATE TABLE IF NOT EXISTS welcome_bonuses (
        user_id INTEGER PRIMARY KEY,
        bonus_received BOOLEAN DEFAULT 0,
        received_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )`);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const firstName = msg.from.first_name;
    const startPayload = msg.text.split(' ')[1]; // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä

    console.log(`üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞`);

    // –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (5 –∑–≤—ë–∑–¥)
    await giveWelcomeBonus(userId);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
    if (startPayload && startPayload.startsWith('ref_')) {
        await processReferral(startPayload, userId);
    }

    // –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    const welcomeText = `
üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LinkGold, ${firstName}!</b>

üöÄ <b>LinkGold</b> - —ç—Ç–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–¥–∞–Ω–∏–π –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö.

üíé <b>–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>
‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã
‚Ä¢ –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è
‚Ä¢ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å 5‚≠ê
‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞

üí∞ <b>–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å: 5 –∑–≤—ë–∑–¥!</b>

üéØ <b>–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å:</b>
1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ
2. –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è (–ø–æ–¥–ø–∏—Å–∫–∏, –ª–∞–π–∫–∏, —Ä–µ–ø–æ—Å—Ç—ã)
3. –í—ã–≤–æ–¥–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –æ—Ç 50 —Ä—É–±–ª–µ–π

üì¢ <b>–¢–∞–∫–∂–µ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª</b> - —Ç–∞–º –º—ã –ø—É–±–ª–∏–∫—É–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏ –≤–∞–∂–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è!
    `;

    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
    const keyboard = {
        reply_markup: {
            inline_keyboard: [
                [{
                    text: "üåê –ü–ï–†–ï–ô–¢–ò –ù–ê –°–ê–ô–¢",
                    web_app: { url: "https://your-domain.com" }
                }],
                [{
                    text: "üì¢ –ü–û–î–ü–ò–°–ê–¢–¨–°–Ø –ù–ê –ö–ê–ù–ê–õ",
                    url: "https://t.me/LinkGoldChannel"
                }]
            ]
        }
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.sendMessage(chatId, welcomeText, {
        parse_mode: 'HTML',
        ...keyboard
    });
});

// –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
async function giveWelcomeBonus(userId) {
    return new Promise((resolve, reject) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –±–æ–Ω—É—Å
        db.get("SELECT bonus_received FROM welcome_bonuses WHERE user_id = ?", [userId], (err, row) => {
            if (err) {
                reject(err);
                return;
            }

            if (!row) {
                // –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
                const https = require('https');
                
                const data = JSON.stringify({
                    userId: userId,
                    amount: 5
                });

                const options = {
                    hostname: 'your-domain.com', // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω
                    port: 443,
                    path: '/api/user/bonus/welcome',
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                };

                const req = https.request(options, (res) => {
                    console.log(`‚úÖ –ë–æ–Ω—É—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
                });

                req.on('error', (error) => {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞:', error);
                });

                req.write(data);
                req.end();

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –±–æ—Ç–∞
                db.run("INSERT INTO welcome_bonuses (user_id, bonus_received) VALUES (?, 1)", [userId], (err) => {
                    if (err) {
                        reject(err);
                        return;
                    }
                    console.log(`‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å –∑–∞–ø–∏—Å–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
                    resolve(true);
                });
            } else {
                resolve(false); // –ë–æ–Ω—É—Å —É–∂–µ –±—ã–ª –Ω–∞—á–∏—Å–ª–µ–Ω
            }
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
async function processReferral(referralCode, referredId) {
    return new Promise((resolve, reject) => {
        const referrerId = referralCode.replace('ref_', '');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Å–≤–æ—é –∂–µ —Å—Å—ã–ª–∫—É
        if (parseInt(referrerId) === referredId) {
            resolve(false);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª
        db.get("SELECT * FROM referral_bonuses WHERE referred_id = ?", [referredId], (err, existing) => {
            if (err) {
                reject(err);
                return;
            }

            if (!existing) {
                // –ù–∞—á–∏—Å–ª—è–µ–º 15 –∑–≤—ë–∑–¥ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É —á–µ—Ä–µ–∑ API
                const https = require('https');
                
                const data = JSON.stringify({
                    userId: referrerId,
                    referredId: referredId,
                    amount: 15
                });

                const options = {
                    hostname: 'your-domain.com', // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω
                    port: 443,
                    path: '/api/user/bonus/referral',
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                };

                const req = https.request(options, (res) => {
                    console.log(`‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${referrerId}`);
                });

                req.on('error', (error) => {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞:', error);
                });

                req.write(data);
                req.end();

                // –ù–∞—á–∏—Å–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ 5 –∑–≤—ë–∑–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–º—É
                giveWelcomeBonus(referredId);

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –±–æ—Ç–∞
                db.run("INSERT INTO referral_bonuses (referrer_id, referred_id, bonus_paid) VALUES (?, ?, 1)", 
                    [referrerId, referredId], (err) => {
                        if (err) {
                            reject(err);
                            return;
                        }
                        console.log(`‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã: ${referrerId} -> ${referredId}`);
                        resolve(true);
                    });
            } else {
                resolve(false); // –†–µ—Ñ–µ—Ä–∞–ª —É–∂–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
            }
        });
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('polling_error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ polling:', error);
});

console.log('ü§ñ –ë–æ—Ç LinkGold –∑–∞–ø—É—â–µ–Ω!');