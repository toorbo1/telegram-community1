// admin.js - –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏

class AdminManager {
    constructor() {
        this.API_BASE_URL = window.location.origin;
        this.ADMIN_ID = 8036875641;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    init() {
        this.setupAdminEventListeners();
        this.checkAdminRights();
        console.log('‚öôÔ∏è Admin manager initialized');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    checkAdminRights() {
        const adminNavItem = document.getElementById('admin-nav-item');
        
        const isMainAdmin = parseInt(window.currentUser?.id) === this.ADMIN_ID;
        const isRegularAdmin = window.currentUser?.is_admin === true;
        
        if (window.currentUser && (isMainAdmin || isRegularAdmin)) {
            if (adminNavItem) {
                adminNavItem.style.display = 'flex';
                console.log('‚úÖ Admin nav item shown - user is admin');
            }
        } else {
            if (adminNavItem) {
                adminNavItem.style.display = 'none';
                console.log('‚ùå Admin nav item hidden - user is not admin');
            }
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    setupAdminEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        this.setupAdminSectionHandlers();
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–æ—Ä–º
        this.setupAdminFormHandlers();
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–µ–∫—Ü–∏–π
    setupAdminSectionHandlers() {
        const adminButtons = document.querySelectorAll('.admin-btn');
        adminButtons.forEach(btn => {
            btn.addEventListener('click', (e) => {
                const section = e.target.getAttribute('onclick')?.match(/showAdminSection\('([^']+)'\)/)?.[1];
                if (section) {
                    this.showAdminSection(section);
                }
            });
        });
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ñ–æ—Ä–º
    setupAdminFormHandlers() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞
        const postForm = document.getElementById('admin-post-content');
        if (postForm) {
            postForm.addEventListener('keypress', (e) => {
                if (e.key === 'Enter' && e.ctrlKey) {
                    window.addNewPost();
                }
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
        const taskTitle = document.getElementById('admin-task-title');
        if (taskTitle) {
            taskTitle.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    document.getElementById('admin-task-description').focus();
                }
            });
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–∫—Ü–∏—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    showAdminSection(section) {
        console.log('üîÑ Switching to admin section:', section);
        
        // –°–∫—Ä—ã–≤–∞–µ–º –í–°–ï –∞–¥–º–∏–Ω —Å–µ–∫—Ü–∏–∏
        const adminSections = document.querySelectorAll('.admin-section');
        adminSections.forEach(sec => {
            sec.style.display = 'none';
            console.log(`‚ùå Hiding: ${sec.id}`);
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–µ–∫—Ü–∏—é
        const targetSection = document.getElementById('admin-' + section + '-section');
        if (targetSection) {
            targetSection.style.display = 'block';
            console.log(`‚úÖ Showing: admin-${section}-section`);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–µ–∫—Ü–∏–π
            this.loadSectionData(section);
        } else {
            console.error(`‚ùå Target section not found: admin-${section}-section`);
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–µ–∫—Ü–∏–∏
    async loadSectionData(section) {
        switch(section) {
            case 'posts':
                console.log('üìù Loading posts management...');
                await this.loadAdminPosts();
                break;
            case 'tasks':
                console.log('üìã Loading tasks management...');
                await this.loadAdminTasks();
                break;
            case 'payments':
                console.log('üí≥ Loading withdrawal requests...');
                await this.loadWithdrawalRequests();
                break;
            case 'verification':
                console.log('‚úÖ Loading task verifications...');
                await this.loadTaskVerifications();
                break;
            case 'support':
                console.log('üí¨ Loading support chats...');
                await this.loadAdminChats();
                break;
            case 'admins':
                console.log('üë• Loading admins list...');
                await this.loadAdminsList();
                break;
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    async loadAdminPosts() {
        try {
            console.log('üìù Loading admin posts...');
            const result = await this.makeRequest('/posts');
            if (result.success) {
                this.displayAdminPosts(result.posts);
            }
        } catch (error) {
            console.error('Error loading admin posts:', error);
        }
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    displayAdminPosts(posts) {
        const container = document.getElementById('admin-posts-list');
        if (!container) {
            console.error('‚ùå Admin posts container not found');
            return;
        }
        
        container.innerHTML = '';
        
        if (!posts || posts.length === 0) {
            container.innerHTML = `
                <div class="no-tasks" style="text-align: center; padding: 40px 20px;">
                    <div style="font-size: 48px; margin-bottom: 16px;">üìù</div>
                    <div>–ù–µ—Ç –ø–æ—Å—Ç–æ–≤</div>
                    <div style="font-size: 14px; color: var(--text-secondary); margin-top: 8px;">
                        –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç
                    </div>
                </div>
            `;
            return;
        }
        
        posts.forEach(post => {
            const postElement = document.createElement('div');
            postElement.className = 'admin-task-item';
            postElement.innerHTML = `
                <div class="admin-task-header">
                    <div class="admin-task-title">${this.escapeHtml(post.title)}</div>
                    <div class="admin-task-actions">
                        <button class="admin-task-delete" onclick="deletePost(${post.id})">
                            üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                        </button>
                    </div>
                </div>
                <div class="admin-task-description">${this.escapeHtml(post.content)}</div>
                <div style="font-size: 12px; color: var(--text-secondary); margin-top: 8px;">
                    –ê–≤—Ç–æ—Ä: ${post.author} ‚Ä¢ ${new Date(post.created_at).toLocaleDateString('ru-RU')}
                </div>
            `;
            container.appendChild(postElement);
        });
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    async loadAdminTasks() {
        if (!window.currentUser) return;
        
        try {
            const result = await this.makeRequest(`/admin/tasks?adminId=${window.currentUser.id}`);
            if (result.success) {
                this.displayAdminTasks(result.tasks);
            }
        } catch (error) {
            console.error('Error loading admin tasks:', error);
        }
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    displayAdminTasks(tasks) {
        const container = document.getElementById('admin-tasks-list');
        if (!container) return;
        
        container.innerHTML = '';
        
        if (!tasks || tasks.length === 0) {
            container.innerHTML = `
                <div class="no-tasks" style="text-align: center; padding: 40px 20px; background: var(--card-bg); border-radius: 12px; border: 1px solid var(--border);">
                    <div style="font-size: 48px; margin-bottom: 16px;">üìù</div>
                    <div style="font-size: 18px; margin-bottom: 8px;">–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π</div>
                    <div style="font-size: 14px; color: var(--text-secondary);">
                        –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–æ—Ä–º—É –≤—ã—à–µ
                    </div>
                </div>
            `;
            return;
        }
        
        tasks.forEach(task => {
            const taskElement = document.createElement('div');
            taskElement.className = 'admin-task-item';
            taskElement.style.cssText = `
                background: var(--card-bg);
                border: 1px solid var(--border);
                border-radius: 12px;
                padding: 16px;
                margin-bottom: 12px;
            `;
            
            taskElement.innerHTML = `
                <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 8px;">
                    <div style="flex: 1;">
                        <div style="font-weight: 600; font-size: 16px; margin-bottom: 4px;">${this.escapeHtml(task.title)}</div>
                        <div style="color: var(--text-secondary); font-size: 14px;">${this.escapeHtml(task.description)}</div>
                    </div>
                    <div style="display: flex; gap: 8px;">
                        <button class="admin-task-delete" onclick="deleteTask(${task.id})" style="background: var(--error); color: white; border: none; padding: 6px 12px; border-radius: 6px; cursor: pointer;">
                            üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                        </button>
                    </div>
                </div>
                <div style="display: flex; gap: 12px; font-size: 12px; color: var(--text-secondary);">
                    <span>üí∞ ${task.price} ‚≠ê</span>
                    <span>üìÅ ${task.category || 'general'}</span>
                    <span>üë• ${task.people_required || 1} —á–µ–ª.</span>
                    <span>‚ö° ${task.difficulty || '–õ–µ–≥–∫–∞—è'}</span>
                </div>
                ${task.image_url ? `
                    <div style="margin-top: 10px;">
                        <img src="${task.image_url}" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è" style="max-width: 200px; border-radius: 8px; border: 1px solid var(--border);">
                    </div>
                ` : ''}
            `;
            
            container.appendChild(taskElement);
        });
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
    async loadWithdrawalRequests() {
        console.log('üîÑ Loading withdrawal requests...');
        
        if (!window.currentUser) {
            console.log('‚ùå No current user');
            window.showNotification('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω', 'error');
            return;
        }
        
        try {
            const result = await this.makeRequest(`/admin/withdrawal-requests?adminId=${window.currentUser.id}`);
            console.log('üì® Withdrawal requests response:', result);
            
            if (result.success) {
                this.displayWithdrawalRequests(result.requests);
            } else {
                console.error('‚ùå Failed to load requests:', result.error);
                window.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫: ' + result.error, 'error');
            }
        } catch (error) {
            console.error('‚ùå Load withdrawal requests error:', error);
            window.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫: ' + error.message, 'error');
        }
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥
    displayWithdrawalRequests(requests) {
        const container = document.getElementById('withdrawal-requests-list');
        if (!container) {
            console.error('‚ùå Container not found');
            return;
        }
        
        container.innerHTML = '';
        
        if (!requests || requests.length === 0) {
            container.innerHTML = `
                <div style="text-align: center; padding: 40px 20px; color: var(--text-secondary);">
                    <div style="font-size: 48px; margin-bottom: 16px;">üí´</div>
                    <div>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—ã–≤–æ–¥</div>
                    <div style="font-size: 12px; margin-top: 8px;">–ù–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å</div>
                </div>
            `;
            return;
        }
        
        console.log(`‚úÖ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º ${requests.length} –∑–∞—è–≤–æ–∫`);
        
        requests.forEach(request => {
            const requestElement = document.createElement('div');
            requestElement.className = 'admin-task-item';
            requestElement.style.marginBottom = '15px';
            
            const userName = request.first_name || request.username || `User_${request.user_id}`;
            const requestDate = new Date(request.created_at).toLocaleString('ru-RU');
            
            requestElement.innerHTML = `
                <div class="admin-task-header">
                    <div class="admin-task-title">
                        ${userName}
                        ${request.username ? ` (@${request.username})` : ''}
                    </div>
                    <div class="admin-task-price" style="font-size: 20px; color: var(--gold);">
                        ${request.amount} ‚≠ê
                    </div>
                </div>
                <div class="admin-task-description">
                    <div>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${request.user_id}</div>
                    <div>–ó–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω: ${requestDate}</div>
                </div>
                <div class="admin-task-actions" style="margin-top: 10px; display: flex; gap: 10px;">
                    <button class="admin-task-approve" onclick="completeWithdrawal(${request.id})" 
                            style="background: var(--success); color: white; border: none; padding: 10px 20px; border-radius: 8px; cursor: pointer; flex: 1;">
                        ‚úÖ –ü–µ—Ä–µ—á–∏—Å–ª–∏–ª —Å—Ä–µ–¥—Å—Ç–≤–∞
                    </button>
                </div>
            `;
            
            container.appendChild(requestElement);
        });
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
    async loadTaskVerifications() {
        if (!window.currentUser) return;

        try {
            const result = await this.makeRequest(`/admin/task-verifications?adminId=${window.currentUser.id}`);
            if (result.success) {
                this.displayTaskVerifications(result.verifications);
            }
        } catch (error) {
            console.error('Error loading task verifications:', error);
        }
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
    displayTaskVerifications(verifications) {
        const container = document.getElementById('admin-verification-list');
        if (!container) return;

        container.innerHTML = '';

        if (!verifications || verifications.length === 0) {
            container.innerHTML = `
                <div class="no-tasks" style="text-align: center; padding: 40px 20px;">
                    <div style="font-size: 48px; margin-bottom: 16px;">‚úÖ</div>
                    <div>–ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ</div>
                    <div style="font-size: 14px; color: var(--text-secondary); margin-top: 8px;">
                        –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã
                    </div>
                </div>
            `;
            return;
        }

        verifications.forEach(verification => {
            const verificationElement = document.createElement('div');
            verificationElement.className = 'verification-item';
            verificationElement.onclick = () => this.openVerificationModal(verification);

            const userAvatar = verification.user_name ? verification.user_name.charAt(0).toUpperCase() : 'U';
            const submissionTime = window.formatPostDate(verification.submitted_at);

            verificationElement.innerHTML = `
                <div class="verification-header">
                    <div class="verification-avatar">
                        ${userAvatar}
                    </div>
                    <div class="verification-user-info">
                        <div class="verification-user-name">
                            ${verification.user_name}
                            ${verification.username ? `(@${verification.username})` : ''}
                        </div>
                        <div class="verification-task-title">${verification.task_title}</div>
                    </div>
                    <div class="verification-price">${verification.task_price} ‚≠ê</div>
                </div>
                <div class="verification-time">–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${submissionTime}</div>
            `;

            container.appendChild(verificationElement);
        });
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    async loadAdminChats() {
        if (!window.currentUser) return;
        
        try {
            console.log('üì• Loading admin chats...');
            const result = await this.makeRequest(`/support/chats`);
            
            if (result.success) {
                console.log(`‚úÖ Loaded ${result.chats?.length || 0} active chats`);
                this.displayAdminChatsList(result.chats || []);
            } else {
                console.error('‚ùå Failed to load chats:', result.error);
            }
        } catch (error) {
            console.error('‚ùå Error loading admin chats:', error);
        }
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
    displayAdminChatsList(chats) {
        const container = document.getElementById('active-chats-list');
        if (!container) return;
        
        container.innerHTML = '';
        
        if (!chats || chats.length === 0) {
            container.innerHTML = `
                <div class="no-tasks" style="text-align: center; padding: 20px;">
                    <div style="font-size: 24px; margin-bottom: 10px;">üí¨</div>
                    <div>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤</div>
                    <div style="font-size: 12px; color: var(--text-secondary); margin-top: 8px;">
                        –ß–∞—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞–ø–∏—à—É—Ç –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
                    </div>
                </div>
            `;
            return;
        }
        
        chats.forEach(chat => {
            const chatElement = this.createChatElement(chat, 'active');
            container.appendChild(chatElement);
        });
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —á–∞—Ç–∞
    createChatElement(chat, listType) {
        const chatElement = document.createElement('div');
        const isUnread = chat.unread_count > 0;
        const isArchived = !chat.is_active;
        
        chatElement.className = `chat-item ${isUnread ? 'unread' : ''} ${isArchived ? 'archived' : ''}`;
        chatElement.onclick = () => this.openAdminChatWindow(chat);
        
        const avatarText = chat.user_name ? chat.user_name.charAt(0).toUpperCase() : 'U';
        const displayName = chat.user_name || `User_${chat.user_id}`;
        const lastMessage = chat.last_message || '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π';
        
        chatElement.innerHTML = `
            <div class="chat-avatar-small">
                ${avatarText}
            </div>
            <div class="chat-info-small">
                <div class="chat-name-small">
                    ${displayName}
                    ${isArchived ? '<span class="archived-badge">–∞—Ä—Ö–∏–≤</span>' : ''}
                </div>
                <div class="chat-last-message">${this.escapeHtml(lastMessage)}</div>
            </div>
            <div class="chat-meta">
                <div class="chat-time">${chat.moscow_time || window.formatPostDate(chat.last_message_time)}</div>
                ${isUnread ? `<div class="unread-badge">${chat.unread_count}</div>` : ''}
            </div>
        `;
        
        return chatElement;
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤
    async loadAdminsList() {
        console.log('üîÑ Loading admins list...');
        
        if (!window.currentUser || parseInt(window.currentUser.id) !== this.ADMIN_ID) {
            console.log('‚ùå User is not main admin');
            return;
        }
        
        try {
            const result = await this.makeRequest(`/admin/admins-list?adminId=${window.currentUser.id}`);
            
            if (result.success) {
                this.displayAdminsList(result.admins);
            } else {
                window.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤: ' + result.error, 'error');
            }
        } catch (error) {
            console.error('‚ùå Error loading admins list:', error);
            window.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤', 'error');
        }
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤
    displayAdminsList(admins) {
        const container = document.getElementById('admins-list');
        if (!container) return;
        
        container.innerHTML = '';
        
        if (!admins || admins.length === 0) {
            container.innerHTML = `
                <div class="no-tasks" style="text-align: center; padding: 30px;">
                    <div style="font-size: 48px; margin-bottom: 16px;">üë•</div>
                    <div>–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤</div>
                    <div style="font-size: 14px; color: var(--text-secondary); margin-top: 8px;">
                        –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    </div>
                </div>
            `;
            return;
        }
        
        admins.forEach(admin => {
            const adminElement = document.createElement('div');
            adminElement.className = 'admin-task-item';
            
            const isMainAdmin = parseInt(admin.user_id) === this.ADMIN_ID;
            const joinDate = new Date(admin.created_at).toLocaleDateString('ru-RU');
            const fullName = `${admin.first_name} ${admin.last_name || ''}`.trim();
            const displayName = fullName || `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${admin.user_id}`;
            
            adminElement.innerHTML = `
                <div class="admin-task-header">
                    <div class="admin-task-title">
                        ${displayName}
                        ${isMainAdmin ? ' <span style="color: var(--gold);">(–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω)</span>' : ''}
                    </div>
                    ${!isMainAdmin ? `
                        <div class="admin-task-actions">
                            <button class="admin-task-delete" onclick="removeAdmin(${admin.user_id})">
                                üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                            </button>
                        </div>
                    ` : ''}
                </div>
                <div class="admin-task-description">
                    @${admin.username} ‚Ä¢ ID: ${admin.user_id} ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω: ${joinDate}
                </div>
                <div style="margin-top: 8px; font-size: 12px; color: ${admin.is_admin ? 'var(--success)' : 'var(--error)'};">
                    ${admin.is_admin ? '‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã' : '‚ùå –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã'}
                </div>
            `;
            
            container.appendChild(adminElement);
        });
    }

    // –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    async makeRequest(endpoint, options = {}) {
        try {
            const url = endpoint.startsWith('http') ? endpoint : `${this.API_BASE_URL}${endpoint}`;
            
            const response = await fetch(url, {
                headers: {
                    'Content-Type': 'application/json',
                    ...options.headers
                },
                ...options
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            return await response.json();
            
        } catch (error) {
            console.error('üí• Request failed:', error);
            throw error;
        }
    }

    escapeHtml(unsafe) {
        if (!unsafe) return '';
        return unsafe
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
const adminManager = new AdminManager();

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.showAdminSection = (section) => adminManager.showAdminSection(section);
window.loadAdminTasks = () => adminManager.loadAdminTasks();
window.loadWithdrawalRequests = () => adminManager.loadWithdrawalRequests();
window.loadTaskVerifications = () => adminManager.loadTaskVerifications();
window.loadAdminChats = () => adminManager.loadAdminChats();
window.loadAdminsList = () => adminManager.loadAdminsList();
window.checkAdminRights = () => adminManager.checkAdminRights();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
    adminManager.init();
});