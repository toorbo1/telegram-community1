// üîß –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
document.addEventListener('DOMContentLoaded', function() {
    console.log('üéÆ Initializing LinkGold app...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
    initializeRippleEffects();
    optimizeAnimations();
    lazyLoadImages();
    preloadResources();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram
    if (typeof tg !== 'undefined') {
        tg.expand();
        tg.ready();
        initializeTelegramUser();
    } else {
        console.log('Telegram Web App context not available');
        initializeTestUser();
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è layout
    fixLayoutIssues();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    initializeEventHandlers();
});

// üîß –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
async function initializeTelegramUser() {
    try {
        if (tg.initDataUnsafe && tg.initDataUnsafe.user) {
            const tgUser = tg.initDataUnsafe.user;
            
            currentUser = {
                id: tgUser.id,
                firstName: tgUser.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                lastName: tgUser.last_name || '',
                username: tgUser.username || `user_${tgUser.id}`,
                photoUrl: tgUser.photo_url || '',
                isAdmin: parseInt(tgUser.id) === ADMIN_ID
            };
            
            // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            try {
                const authResult = await makeRequest('/user/auth', {
                    method: 'POST',
                    body: JSON.stringify({
                        user: currentUser
                    })
                });
                
                if (authResult.success) {
                    Object.assign(currentUser, authResult.user);
                }
            } catch (authError) {
                console.log('Auth endpoint not available, continuing with basic user data');
            }
            
            initializeApp();
        } else {
            console.log('Telegram user data not available');
            initializeTestUser();
        }
    } catch (error) {
        console.error('Error initializing Telegram user:', error);
        initializeTestUser();
    }
}

function initializeTestUser() {
    currentUser = {
        id: 123456789,
        firstName: '–¢–µ—Å—Ç–æ–≤—ã–π',
        lastName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        username: 'test_user',
        photoUrl: '',
        isAdmin: false,
        balance: 150,
        tasks_completed: 5,
        active_tasks: 2,
        quality_rate: 95,
        level: 1
    };
    
    initializeApp();
}

// üîß –û–°–ù–û–í–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
async function initializeApp() {
    console.log('üéÆ Initializing LinkGold app...');

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è layout
    fixLayoutIssues();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    console.log('üöÄ FORCE loading tasks on app start...');
    setTimeout(() => {
        if (currentUser) {
            console.log('üë§ User authenticated, loading tasks...');
            loadTasksForCategory('new');
        } else {
            console.log('‚ùå No user for task loading');
        }
    }, 1000);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    showNotification('üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É...', 'info');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API
    try {
        console.log('üîç Testing API connection...');
        const health = await makeRequest('/api/health');
        console.log('‚úÖ API connection successful:', health);
        showNotification('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!', 'success');
        
    } catch (error) {
        console.error('‚ùå API connection failed:', error);
        showNotification('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
        showRetryButton();
        return;
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    displayUserProfile();
    checkAdminRights();
    loadMainPagePosts();
    initializeSearch();
    loadUserTasks();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    startUserDataAutoUpdate();
    
    console.log('üéâ App initialized successfully');
}

// üîß –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø LAYOUT
function fixLayoutIssues() {
    console.log('üîß Applying layout fixes...');
    
    const elements = document.querySelectorAll('*');
    elements.forEach(el => {
        el.style.maxWidth = '100%';
        el.style.boxSizing = 'border-box';
    });
    
    const tasksGrid = document.querySelector('.tasks-grid');
    if (tasksGrid) {
        tasksGrid.style.width = '100%';
        tasksGrid.style.margin = '0';
        tasksGrid.style.padding = '0';
        tasksGrid.style.overflow = 'hidden';
    }
    
    const taskCards = document.querySelectorAll('.task-card');
    taskCards.forEach(card => {
        card.style.width = '100%';
        card.style.maxWidth = '100%';
        card.style.boxSizing = 'border-box';
        card.style.margin = '0 0 12px 0';
        card.style.overflow = 'hidden';
    });
    
    document.body.style.overflowX = 'hidden';
    document.documentElement.style.overflowX = 'hidden';
    
    console.log('‚úÖ Layout fixes applied');
}

function updateLayoutOnResize() {
    fixLayoutIssues();
}

// üîß –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –°–û–ë–´–¢–ò–ô
function initializeEventHandlers() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
    window.addEventListener('resize', updateLayoutOnResize);
    window.addEventListener('orientationchange', updateLayoutOnResize);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è iOS
    if (/iPad|iPhone|iPod/.test(navigator.userAgent)) {
        document.body.style['-webkit-overflow-scrolling'] = 'touch';
    }
}

// üîß –§–£–ù–ö–¶–ò–ò –ù–ê–í–ò–ì–ê–¶–ò–ò
function hideAllTabs() {
    const allElements = document.querySelectorAll('.tab-content, .page');
    allElements.forEach(element => {
        element.classList.remove('active');
    });
}

function updateNavState(activeTab) {
    document.querySelectorAll('.nav-item').forEach(item => {
        item.classList.remove('active');
    });
    
    const navItems = document.querySelectorAll('.nav-item');
    switch(activeTab) {
        case 'main': 
            if (navItems[0]) navItems[0].classList.add('active'); 
            break;
        case 'tasks': 
            if (navItems[1]) navItems[1].classList.add('active'); 
            break;
        case 'profile': 
            if (navItems[2]) navItems[2].classList.add('active'); 
            break;
        case 'admin': 
            if (navItems[3]) navItems[3].classList.add('active'); 
            break;
    }
}

function showMainTab() {
    hideAllTabs();
    document.getElementById('main-tab').classList.add('active');
    updateNavState('main');
}

function showTasksTab() {
    console.log('üéØ –ü–ï–†–ï–•–û–î –ù–ê –í–ö–õ–ê–î–ö–£ –ó–ê–î–ê–ù–ò–ô');
    
    hideAllTabs();
    const tasksTab = document.getElementById('tasks-tab');
    if (tasksTab) {
        tasksTab.classList.add('active');
    }
    
    updateNavState('tasks');
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
    setTimeout(fixLayoutIssues, 100);
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∫–ª–∞–¥–∫—É "–ù–æ–≤—ã–µ"
    setTimeout(() => {
        showTaskCategory('new');
    }, 150);
}

function showProfileTab() {
    hideAllTabs();
    document.getElementById('profile-tab').classList.add('active');
    updateNavState('profile');
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
    setTimeout(() => {
        updateUserData();
        syncUserProfile();
    }, 100);
}

function showAdminTab() {
    const isMainAdmin = parseInt(currentUser?.id) === ADMIN_ID;
    const isRegularAdmin = currentUser?.is_admin === true;
    
    if (!currentUser || (!isMainAdmin && !isRegularAdmin)) {
        showNotification('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!', 'error');
        return;
    }
    
    hideAllTabs();
    document.getElementById('admin-tab').classList.add('active');
    updateNavState('admin');
}

function showWithdrawPage() {
    hideAllTabs();
    document.getElementById('withdraw-page').classList.add('active');
    updateWithdrawPage();
    loadWithdrawHistory();
}

function showHowItWorksPage() {
    hideAllTabs();
    document.getElementById('how-it-works-page').classList.add('active');
}

function showAboutPage() {
    hideAllTabs();
    document.getElementById('about-page').classList.add('active');
}

function goBackToProfile() {
    showProfileTab();
}

// üîß –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–•
function startUserDataAutoUpdate() {
    setInterval(async () => {
        if (currentUser) {
            try {
                const result = await makeRequest(`/user/${currentUser.id}`);
                if (result.success) {
                    const oldLevel = currentUser.level;
                    const oldTasksCompleted = currentUser.tasks_completed;
                    
                    currentUser = { ...currentUser, ...result.profile };
                    
                    if (currentUser.level !== oldLevel) {
                        console.log(`üéâ –£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω: ${oldLevel} ‚Üí ${currentUser.level}`);
                    }
                    
                    if (currentUser.tasks_completed !== oldTasksCompleted) {
                        console.log(`üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: ${oldTasksCompleted} ‚Üí ${currentUser.tasks_completed}`);
                    }
                    
                    displayUserProfile();
                    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω—ã');
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            }
        }
    }, 30000);
}

// üîß –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–û–í–¢–û–†–ù–û–ô –ü–û–ü–´–¢–ö–ò
function showRetryButton() {
    const retryBtn = document.createElement('button');
    retryBtn.textContent = 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞';
    retryBtn.className = 'btn btn-primary';
    retryBtn.style.margin = '20px auto';
    retryBtn.style.display = 'block';
    retryBtn.onclick = function() {
        retryBtn.remove();
        initializeApp();
    };
    
    document.body.appendChild(retryBtn);
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
window.showMainTab = showMainTab;
window.showTasksTab = showTasksTab;
window.showProfileTab = showProfileTab;
window.showAdminTab = showAdminTab;
window.showWithdrawPage = showWithdrawPage;
window.showHowItWorksPage = showHowItWorksPage;
window.showAboutPage = showAboutPage;
window.goBackToProfile = goBackToProfile;
window.closeModal = closeModal;