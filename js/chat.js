// chat.js - –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —á–∞—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏

class ChatManager {
    constructor() {
        this.currentChatId = null;
        this.currentAdminChat = null;
        this.chatUpdateInterval = null;
        this.API_BASE_URL = window.location.origin;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞
    init() {
        this.setupEventListeners();
        console.log('üí¨ Chat manager initialized');
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ Enter
        const chatInput = document.getElementById('chat-input-field');
        if (chatInput) {
            chatInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    this.sendMessageToAdmin();
                }
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º
        const adminChatInput = document.getElementById('admin-chat-input');
        if (adminChatInput) {
            adminChatInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    this.sendAdminMessage();
                }
            });
        }
    }

    // –û—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async openAdminChat() {
        if (!window.currentUser) {
            window.showNotification('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω', 'error');
            return;
        }
        
        try {
            console.log('üë§ User opening support chat, ID:', window.currentUser.id);
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const chatResult = await this.makeRequest(`/support/user-chat/${window.currentUser.id}`);
            
            if (chatResult.success) {
                this.currentChatId = chatResult.chat.id;
                console.log('‚úÖ Chat ID:', this.currentChatId);
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                try {
                    const messagesResult = await this.makeRequest(`/support/chats/${this.currentChatId}/messages`);
                    if (messagesResult.success) {
                        this.displayChatMessages(messagesResult.messages);
                    }
                } catch (messagesError) {
                    console.log('No messages yet or error loading messages:', messagesError);
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π —á–∞—Ç —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
                    this.displayChatMessages([]);
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Ç
                document.getElementById('admin-chat').classList.add('active');
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
                this.startChatAutoUpdate();
                
            } else {
                throw new Error(chatResult.error || 'Failed to create chat');
            }
        } catch (error) {
            console.error('‚ùå Error opening user chat:', error);
            window.showNotification('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞: ' + error.message, 'error');
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    async sendMessageToAdmin() {
        if (!window.currentUser || !this.currentChatId) {
            window.showNotification('–ß–∞—Ç –Ω–µ –æ—Ç–∫—Ä—ã—Ç', 'error');
            return;
        }
        
        const input = document.getElementById('chat-input-field');
        const message = input.value.trim();
        
        if (!message) {
            window.showNotification('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', 'error');
            return;
        }
        
        try {
            console.log(`‚úâÔ∏è User sending message to chat ${this.currentChatId}:`, message);
            
            const userFullName = window.currentUser.lastName ? 
                `${window.currentUser.firstName} ${window.currentUser.lastName}` : 
                window.currentUser.firstName;
            
            const result = await this.makeRequest(`/support/chats/${this.currentChatId}/messages`, {
                method: 'POST',
                body: JSON.stringify({
                    user_id: window.currentUser.id,
                    user_name: userFullName,
                    user_username: window.currentUser.username,
                    message: message,
                    is_admin: false
                })
            });
            
            if (result.success) {
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                this.addMessageToChat(message, false);
                input.value = '';
                
                window.showNotification('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', 'success');
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('‚ùå Error sending message:', error);
            window.showNotification('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ' + error.message, 'error');
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º
    async sendAdminMessage() {
        if (!this.currentAdminChat || !window.currentUser) {
            console.error('No active chat or user');
            window.showNotification('–ß–∞—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω', 'error');
            return;
        }
        
        const input = document.getElementById('admin-chat-input');
        if (!input) {
            console.error('Admin chat input not found');
            return;
        }
        
        const message = input.value.trim();
        
        if (!message) {
            window.showNotification('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', 'error');
            return;
        }
        
        try {
            console.log(`‚úâÔ∏è Admin sending message to chat ${this.currentAdminChat.id}:`, message);
            
            const result = await this.makeRequest(`/support/chats/${this.currentAdminChat.id}/messages`, {
                method: 'POST',
                body: JSON.stringify({
                    user_id: window.currentUser.id,
                    user_name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                    user_username: window.currentUser.username,
                    message: message,
                    is_admin: true
                })
            });
            
            if (result.success) {
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–¥–º–∏–Ω–∞
                this.addMessageToAdminChat(message, true);
                input.value = '';
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
                if (window.loadAdminChats) {
                    window.loadAdminChats();
                }
                
                console.log('‚úÖ Admin message sent successfully');
                window.showNotification('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', 'success');
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('‚ùå Error sending admin message:', error);
            window.showNotification('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ' + error.message, 'error');
        }
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
    displayChatMessages(messages) {
        const messagesContainer = document.getElementById('chat-messages');
        if (!messagesContainer) return;
        
        messagesContainer.innerHTML = '';
        
        // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        if (!messages || messages.length === 0) {
            this.addWelcomeMessage();
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        messages.forEach(message => {
            this.addMessageToChat(message.message, message.is_admin, message.sent_at);
        });
        
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    addWelcomeMessage() {
        const messagesContainer = document.getElementById('chat-messages');
        if (!messagesContainer) return;
        
        const welcomeMessage = document.createElement('div');
        welcomeMessage.className = 'message message-admin';
        welcomeMessage.innerHTML = `
            <div class="message-text">–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?</div>
            <div class="message-time">${new Date().toLocaleTimeString('ru-RU', {hour: '2-digit', minute:'2-digit'})}</div>
        `;
        messagesContainer.appendChild(welcomeMessage);
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
    addMessageToChat(message, isAdmin, timestamp = null) {
        const messagesContainer = document.getElementById('chat-messages');
        if (!messagesContainer) return;
        
        const messageElement = document.createElement('div');
        messageElement.className = isAdmin ? 'message message-admin' : 'message message-user';
        
        const messageTime = timestamp ? 
            window.formatPostDate(timestamp) : 
            new Date().toLocaleTimeString('ru-RU', {hour: '2-digit', minute:'2-digit'});
        
        messageElement.innerHTML = `
            <div class="message-text">${this.escapeHtml(message)}</div>
            <div class="message-time">${messageTime}</div>
        `;
        
        messagesContainer.appendChild(messageElement);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∞
    addMessageToAdminChat(message, isAdmin, timestamp = null) {
        const messagesContainer = document.getElementById('admin-chat-messages');
        if (!messagesContainer) return;
        
        const messageElement = document.createElement('div');
        messageElement.className = isAdmin ? 'message message-admin' : 'message message-user';
        
        const messageTime = timestamp ? 
            window.formatPostDate(timestamp) : 
            new Date().toLocaleTimeString('ru-RU', {hour: '2-digit', minute:'2-digit'});
        
        messageElement.innerHTML = `
            <div class="message-text">${this.escapeHtml(message)}</div>
            <div class="message-time">${messageTime}</div>
        `;
        
        messagesContainer.appendChild(messageElement);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞
    startChatAutoUpdate() {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
        if (this.chatUpdateInterval) {
            clearInterval(this.chatUpdateInterval);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        this.chatUpdateInterval = setInterval(async () => {
            if (this.currentChatId) {
                try {
                    const messagesResult = await this.makeRequest(`/support/chats/${this.currentChatId}/messages`);
                    if (messagesResult.success) {
                        this.displayChatMessages(messagesResult.messages);
                    }
                } catch (error) {
                    console.log('Chat auto-update error:', error);
                }
            }
        }, 5000);
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞
    closeChat() {
        document.getElementById('admin-chat').classList.remove('active');
        this.currentChatId = null;
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        if (this.chatUpdateInterval) {
            clearInterval(this.chatUpdateInterval);
            this.chatUpdateInterval = null;
        }
    }

    // –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    async makeRequest(endpoint, options = {}) {
        try {
            const url = endpoint.startsWith('http') ? endpoint : `${this.API_BASE_URL}${endpoint}`;
            
            const response = await fetch(url, {
                headers: {
                    'Content-Type': 'application/json',
                    ...options.headers
                },
                ...options
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            return await response.json();
            
        } catch (error) {
            console.error('üí• Request failed:', error);
            throw error;
        }
    }

    escapeHtml(unsafe) {
        if (!unsafe) return '';
        return unsafe
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —á–∞—Ç–∞
const chatManager = new ChatManager();

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.openAdminChat = () => chatManager.openAdminChat();
window.sendMessageToAdmin = () => chatManager.sendMessageToAdmin();
window.closeChat = () => chatManager.closeChat();
window.sendAdminMessage = () => chatManager.sendAdminMessage();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
    chatManager.init();
});