// üîß –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú

// üîß –û–ë–ù–û–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
async function updateUserData() {
    if (!currentUser) return;
    
    try {
        const result = await makeRequest(`/user/${currentUser.id}`);
        if (result.success) {
            currentUser = { ...currentUser, ...result.profile };
            displayUserProfile();
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', currentUser.balance);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
}

// üîß –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –ü–†–û–§–ò–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
function displayUserProfile() {
    if (!currentUser) return;

    // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    const firstNameElement = document.getElementById('user-first-name');
    const usernameElement = document.getElementById('user-username');
    const levelElement = document.getElementById('user-level');
    const balanceElement = document.getElementById('user-balance-main');
    
    if (firstNameElement) {
        const fullName = currentUser.lastName ? 
            `${currentUser.firstName} ${currentUser.lastName}` : 
            currentUser.firstName;
        firstNameElement.textContent = fullName;
    }
    
    if (usernameElement) usernameElement.textContent = currentUser.username || 'username';
    if (levelElement) levelElement.textContent = currentUser.level || 1;
    
    // –ë–∞–ª–∞–Ω—Å
    const userBalance = currentUser.balance || 0;
    if (balanceElement) balanceElement.textContent = `${userBalance} ‚≠ê`;
    
    // –ê–≤–∞—Ç–∞—Ä
    const userPhotoElement = document.getElementById('user-photo');
    if (userPhotoElement && currentUser.photoUrl) {
        userPhotoElement.src = currentUser.photoUrl;
        userPhotoElement.alt = '–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è';
        userPhotoElement.style.display = 'block';
    } else if (userPhotoElement) {
        userPhotoElement.style.display = 'flex';
        userPhotoElement.style.alignItems = 'center';
        userPhotoElement.style.justifyContent = 'center';
        userPhotoElement.style.backgroundColor = '#6366f1';
        userPhotoElement.style.color = 'white';
        userPhotoElement.style.fontWeight = 'bold';
        userPhotoElement.style.borderRadius = '50%';
        userPhotoElement.textContent = currentUser.firstName ? currentUser.firstName.charAt(0).toUpperCase() : 'U';
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
    updateProfileStats();
    updateReferralSystem();
    updateLevelProgress();
}

// üîß –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ü–†–û–§–ò–õ–Ø
function updateProfileStats() {
    if (!currentUser) return;
    
    const stats = document.querySelectorAll('.profile-stat .stat-value');
    if (stats.length >= 4) {
        stats[0].textContent = `${currentUser.balance || 0} ‚≠ê`;
        stats[1].textContent = currentUser.tasks_completed || 0;
        stats[2].textContent = currentUser.active_tasks || 0;
        stats[3].textContent = `${currentUser.quality_rate || 0}%`;
    }
}

// üîß –û–ë–ù–û–í–õ–ï–ù–ò–ï –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´
function updateReferralSystem() {
    if (!currentUser) return;
    
    const referralCode = currentUser.referral_code || `ref_${currentUser.id}`;
    const referralLink = `https://t.me/LinkGoldMoney_bot?start=${referralCode}`;
    
    const referralInput = document.getElementById('referral-link');
    if (referralInput) referralInput.value = referralLink;
    
    const refInvited = document.getElementById('ref-invited');
    const refEarned = document.getElementById('ref-earned');
    
    if (refInvited) refInvited.textContent = currentUser.referral_count || 0;
    if (refEarned) refEarned.textContent = `${currentUser.referral_earned || 0} ‚≠ê`;
    
    const referralInfo = document.querySelector('.referral-info');
    if (referralInfo) {
        referralInfo.innerHTML = `
            üéÅ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ: <strong>20‚≠ê</strong> –∑–∞ –¥—Ä—É–≥–∞<br>
            üéÅ –î—Ä—É–≥ –ø–æ–ª—É—á–∞–µ—Ç: <strong>10‚≠ê</strong> –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏<br><br>
            üîó –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ Telegram
        `;
    }
}

// üîß –°–ò–°–¢–ï–ú–ê –£–†–û–í–ù–ï–ô
const LEVEL_SYSTEM = {
    1: { tasksRequired: 10, name: "–ù–æ–≤–∏—á–æ–∫" },
    2: { tasksRequired: 20, name: "–£—á–µ–Ω–∏–∫" },
    3: { tasksRequired: 30, name: "–û–ø—ã—Ç–Ω—ã–π" },
    4: { tasksRequired: 40, name: "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª" },
    5: { tasksRequired: 50, name: "–≠–∫—Å–ø–µ—Ä—Ç" },
    6: { tasksRequired: 60, name: "–ú–∞—Å—Ç–µ—Ä" },
    7: { tasksRequired: 70, name: "–ì—É—Ä—É" },
    8: { tasksRequired: 80, name: "–õ–µ–≥–µ–Ω–¥–∞" },
    9: { tasksRequired: 90, name: "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä" },
    10: { tasksRequired: 100, name: "–ë–æ–≥ –∑–∞–¥–∞–Ω–∏–π" }
};

function calculateUserLevel(completedTasks) {
    let currentLevel = 1;
    let tasksForCurrentLevel = 0;
    let tasksForNextLevel = LEVEL_SYSTEM[1].tasksRequired;
    let progressPercentage = 0;
    
    for (let level = 1; level <= Object.keys(LEVEL_SYSTEM).length; level++) {
        if (completedTasks >= LEVEL_SYSTEM[level].tasksRequired) {
            currentLevel = level;
        } else {
            break;
        }
    }
    
    const currentLevelRequirement = LEVEL_SYSTEM[currentLevel].tasksRequired;
    
    if (currentLevel < Object.keys(LEVEL_SYSTEM).length) {
        const nextLevelRequirement = LEVEL_SYSTEM[currentLevel + 1].tasksRequired;
        tasksForCurrentLevel = completedTasks - currentLevelRequirement;
        const totalTasksForNextLevel = nextLevelRequirement - currentLevelRequirement;
        
        progressPercentage = Math.min(100, Math.round((tasksForCurrentLevel / totalTasksForNextLevel) * 100));
        tasksForNextLevel = nextLevelRequirement;
    } else {
        progressPercentage = 100;
        tasksForNextLevel = LEVEL_SYSTEM[currentLevel].tasksRequired;
        tasksForCurrentLevel = completedTasks - currentLevelRequirement;
    }
    
    return {
        level: currentLevel,
        levelName: LEVEL_SYSTEM[currentLevel].name,
        completedTasks: completedTasks,
        currentLevelTasks: tasksForCurrentLevel,
        tasksForNextLevel: tasksForNextLevel,
        progressPercentage: progressPercentage,
        isMaxLevel: currentLevel === Object.keys(LEVEL_SYSTEM).length
    };
}

function updateLevelProgress() {
    if (!currentUser) return;
    
    const completedTasks = currentUser.tasks_completed || 0;
    const levelInfo = calculateUserLevel(completedTasks);
    
    const levelElement = document.getElementById('user-level');
    const progressBar = document.getElementById('level-progress-bar');
    const levelCount = document.querySelector('.level-count');
    const levelInfoText = document.querySelector('.level-info');
    
    if (levelElement) {
        levelElement.textContent = levelInfo.level;
    }
    
    if (progressBar) {
        progressBar.style.width = `${levelInfo.progressPercentage}%`;
    }
    
    if (levelCount) {
        if (levelInfo.isMaxLevel) {
            levelCount.textContent = "–ú–∞–∫—Å. —É—Ä–æ–≤–µ–Ω—å!";
        } else {
            const tasksNeeded = levelInfo.tasksForNextLevel - completedTasks;
            const tasksForThisLevel = levelInfo.tasksForNextLevel - LEVEL_SYSTEM[levelInfo.level].tasksRequired;
            levelCount.textContent = `${levelInfo.currentLevelTasks}/${tasksForThisLevel} –∑–∞–¥–∞–Ω–∏–π`;
        }
    }
    
    if (levelInfoText) {
        if (levelInfo.isMaxLevel) {
            levelInfoText.innerHTML = `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è!`;
        } else {
            const tasksNeeded = levelInfo.tasksForNextLevel - completedTasks;
            levelInfoText.innerHTML = 
                `–£—Ä–æ–≤–µ–Ω—å <strong>${levelInfo.levelName}</strong> ‚Ä¢ ` +
                `–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: <strong>${tasksNeeded}</strong> –∑–∞–¥–∞–Ω–∏–π`;
        }
    }
}

// üîß –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –° TELEGRAM
async function syncUserProfile() {
    if (!currentUser || !window.Telegram?.WebApp) return;
    
    try {
        const tg = window.Telegram.WebApp;
        const tgUser = tg.initDataUnsafe?.user;
        
        if (tgUser) {
            const updatedUser = {
                ...currentUser,
                firstName: tgUser.first_name || currentUser.firstName,
                lastName: tgUser.last_name || currentUser.lastName,
                username: tgUser.username || currentUser.username,
                photoUrl: tgUser.photo_url || currentUser.photoUrl
            };
            
            currentUser = updatedUser;
            displayUserProfile();
            
            console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å Telegram');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
    }
}

// üîß –ö–û–ü–ò–†–û–í–ê–ù–ò–ï –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–°–´–õ–ö–ò
function copyReferralLink() {
    const referralInput = document.getElementById('referral-link');
    if (!referralInput) return;
    
    referralInput.select();
    referralInput.setSelectionRange(0, 99999);
    
    navigator.clipboard.writeText(referralInput.value).then(() => {
        showNotification('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!', 'success');
    }).catch(() => {
        document.execCommand('copy');
        showNotification('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!', 'success');
    });
}

// üîß –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê
function checkAdminRights() {
    const adminNavItem = document.getElementById('admin-nav-item');
    
    const isMainAdmin = parseInt(currentUser?.id) === ADMIN_ID;
    const isRegularAdmin = currentUser?.is_admin === true;
    
    if (currentUser && (isMainAdmin || isRegularAdmin)) {
        if (adminNavItem) {
            adminNavItem.style.display = 'flex';
            console.log('‚úÖ Admin nav item shown - user is admin');
        }
    } else {
        if (adminNavItem) {
            adminNavItem.style.display = 'none';
            console.log('‚ùå Admin nav item hidden - user is not admin');
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
window.updateUserData = updateUserData;
window.displayUserProfile = displayUserProfile;
window.copyReferralLink = copyReferralLink;
window.checkAdminRights = checkAdminRights;
window.syncUserProfile = syncUserProfile;