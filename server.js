const express = require('express');
const { Pool } = require('pg');
const cors = require('cors');
const path = require('path');
const multer = require('multer');
const fs = require('fs');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors({
    origin: '*',
    methods: ['GET', 'POST', 'DELETE', 'PUT'],
    credentials: true
}));
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));
app.use(express.static('.'));
app.use('/uploads', express.static('uploads'));

// –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞...');
console.log('üì° DATABASE_URL:', process.env.DATABASE_URL ? '–ù–∞–π–¥–µ–Ω' : '–ù–µ –Ω–∞–π–¥–µ–Ω');
console.log('üö™ PORT:', PORT);

// PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è Railway —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
const poolConfig = {
    connectionString: process.env.DATABASE_URL,
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è Railway
    connectionTimeoutMillis: 10000,
    idleTimeoutMillis: 30000,
    max: 20
};

const pool = new Pool(poolConfig);

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
async function testDatabaseConnection() {
    try {
        console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
        const client = await pool.connect();
        const result = await client.query('SELECT NOW() as current_time');
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ:', result.rows[0].current_time);
        client.release();
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
        return false;
    }
}

const ADMIN_ID = 8036875641;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
async function initDatabase() {
    try {
        console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL...');
        
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        const tables = [
            `CREATE TABLE IF NOT EXISTS users (
                id BIGINT PRIMARY KEY,
                username VARCHAR(100),
                first_name VARCHAR(100),
                last_name VARCHAR(100),
                photo_url TEXT,
                balance INTEGER DEFAULT 0,
                level INTEGER DEFAULT 1,
                experience INTEGER DEFAULT 0,
                tasks_completed INTEGER DEFAULT 0,
                active_tasks INTEGER DEFAULT 0,
                quality_rate REAL DEFAULT 100,
                referral_count INTEGER DEFAULT 0,
                referral_earned INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )`,

            `CREATE TABLE IF NOT EXISTS posts (
                id SERIAL PRIMARY KEY,
                title VARCHAR(500) NOT NULL,
                content TEXT NOT NULL,
                image_url TEXT,
                author VARCHAR(200) NOT NULL,
                author_id BIGINT NOT NULL,
                is_admin BOOLEAN DEFAULT false,
                likes INTEGER DEFAULT 0,
                dislikes INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )`,

            `CREATE TABLE IF NOT EXISTS tasks (
                id SERIAL PRIMARY KEY,
                title VARCHAR(500) NOT NULL,
                description TEXT NOT NULL,
                category VARCHAR(50) DEFAULT 'general',
                price INTEGER NOT NULL,
                time_to_complete VARCHAR(100),
                difficulty VARCHAR(50),
                people_required INTEGER DEFAULT 1,
                repost_time VARCHAR(100),
                task_url TEXT,
                image_url TEXT,
                created_by BIGINT NOT NULL,
                status VARCHAR(20) DEFAULT 'active',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )`,

            `CREATE TABLE IF NOT EXISTS user_tasks (
                id SERIAL PRIMARY KEY,
                user_id BIGINT NOT NULL,
                task_id INTEGER NOT NULL,
                status VARCHAR(20) DEFAULT 'active',
                screenshot_url TEXT,
                started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                submitted_at TIMESTAMP,
                completed_at TIMESTAMP,
                rejected_at TIMESTAMP,
                rejection_reason TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )`,

            `CREATE TABLE IF NOT EXISTS support_chats (
                id SERIAL PRIMARY KEY,
                user_id BIGINT NOT NULL,
                user_name VARCHAR(200) NOT NULL,
                user_username VARCHAR(100),
                last_message TEXT,
                last_message_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                unread_count INTEGER DEFAULT 0,
                is_active BOOLEAN DEFAULT true,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )`,

            `CREATE TABLE IF NOT EXISTS support_messages (
                id SERIAL PRIMARY KEY,
                chat_id INTEGER NOT NULL,
                user_id BIGINT NOT NULL,
                user_name VARCHAR(200) NOT NULL,
                message TEXT NOT NULL,
                image_url TEXT,
                is_admin BOOLEAN DEFAULT false,
                is_read BOOLEAN DEFAULT false,
                sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )`,

            `CREATE TABLE IF NOT EXISTS withdrawal_operations (
                id SERIAL PRIMARY KEY,
                user_id BIGINT NOT NULL,
                username VARCHAR(100) NOT NULL,
                amount INTEGER NOT NULL,
                status VARCHAR(20) DEFAULT 'processing',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )`,

            `CREATE TABLE IF NOT EXISTS task_verifications (
                id SERIAL PRIMARY KEY,
                user_task_id INTEGER NOT NULL,
                user_id BIGINT NOT NULL,
                task_id INTEGER NOT NULL,
                user_name VARCHAR(200) NOT NULL,
                task_title VARCHAR(500) NOT NULL,
                task_price INTEGER NOT NULL,
                screenshot_url TEXT NOT NULL,
                status VARCHAR(20) DEFAULT 'pending',
                submitted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                reviewed_at TIMESTAMP,
                reviewed_by BIGINT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )`,

            `CREATE TABLE IF NOT EXISTS post_likes (
                id SERIAL PRIMARY KEY,
                post_id INTEGER NOT NULL,
                user_id BIGINT NOT NULL,
                is_like BOOLEAN DEFAULT true,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(post_id, user_id)
            )`
        ];

        for (const tableQuery of tables) {
            try {
                await pool.query(tableQuery);
                console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞: ${tableQuery.split('TABLE IF NOT EXISTS ')[1]?.split(' ')[0]}`);
            } catch (tableError) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã:`, tableError.message);
            }
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        const tasksCount = await pool.query('SELECT COUNT(*) FROM tasks');
        if (parseInt(tasksCount.rows[0].count) === 0) {
            console.log('üìù –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è...');
            await pool.query(`
                INSERT INTO tasks (title, description, price, category, time_to_complete, difficulty, created_by) VALUES
                ('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', '–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à Telegram –∫–∞–Ω–∞–ª –∏ –æ—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º', 50, 'subscribe', '2 –º–∏–Ω—É—Ç—ã', '–õ–µ–≥–∫–∞—è', $1),
                ('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ', '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–∏–¥–µ–æ –¥–æ –∫–æ–Ω—Ü–∞ –∏ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –ª–∞–π–∫', 30, 'view', '5 –º–∏–Ω—É—Ç', '–õ–µ–≥–∫–∞—è', $1),
                ('–°–¥–µ–ª–∞—Ç—å —Ä–µ–ø–æ—Å—Ç', '–°–¥–µ–ª–∞–π—Ç–µ —Ä–µ–ø–æ—Å—Ç –∑–∞–ø–∏—Å–∏ –∫ —Å–µ–±–µ –≤ –∫–∞–Ω–∞–ª', 70, 'repost', '3 –º–∏–Ω—É—Ç—ã', '–°—Ä–µ–¥–Ω—è—è', $1)
            `, [ADMIN_ID]);
            console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã');
        }

        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        const uploadsDir = 'uploads';
        if (!fs.existsSync(uploadsDir)) {
            fs.mkdirSync(uploadsDir, { recursive: true });
        }
        cb(null, uploadsDir);
    },
    filename: function (req, file, cb) {
        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
        cb(null, 'screenshot-' + uniqueSuffix + path.extname(file.originalname));
    }
});

const upload = multer({ 
    storage: storage,
    limits: {
        fileSize: 10 * 1024 * 1024 // 10MB limit
    },
    fileFilter: function (req, file, cb) {
        if (file.mimetype.startsWith('image/')) {
            cb(null, true);
        } else {
            cb(new Error('Only image files are allowed!'), false);
        }
    }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function formatMoscowTime(timestamp) {
    if (!timestamp) return '';
    const date = new Date(timestamp);
    return date.toLocaleString("ru-RU", { 
        timeZone: "Europe/Moscow",
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
}

function formatMoscowTimeShort(timestamp) {
    if (!timestamp) return '';
    const date = new Date(timestamp);
    const now = new Date();
    const diff = now - date;
    
    if (diff < 24 * 60 * 60 * 1000 && date.getDate() === now.getDate()) {
        return date.toLocaleString("ru-RU", { 
            timeZone: "Europe/Moscow",
            hour: '2-digit',
            minute: '2-digit'
        });
    }
    
    return date.toLocaleString("ru-RU", { 
        timeZone: "Europe/Moscow",
        day: '2-digit',
        month: '2-digit',
        hour: '2-digit',
        minute: '2-digit'
    });
}

function getMoscowTime() {
    return new Date().toLocaleString("ru-RU", { timeZone: "Europe/Moscow" });
}

// üéØ –û–°–ù–û–í–ù–´–ï –≠–ù–î–ü–û–ò–ù–¢–´

// Health check —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
app.get('/api/health', async (req, res) => {
    try {
        const dbCheck = await pool.query('SELECT NOW() as db_time, version() as db_version');
        
        res.json({ 
            status: 'OK', 
            message: 'LinkGold API —Ä–∞–±–æ—Ç–∞–µ—Ç —Å PostgreSQL!',
            timestamp: getMoscowTime(),
            database: {
                status: 'Connected',
                time: dbCheck.rows[0].db_time,
                version: dbCheck.rows[0].db_version
            },
            environment: process.env.NODE_ENV || 'development'
        });
    } catch (error) {
        res.status(500).json({
            status: 'ERROR',
            message: 'Database connection failed',
            error: error.message,
            timestamp: getMoscowTime()
        });
    }
});

// üîê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø –ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò
app.post('/api/user/auth', async (req, res) => {
    console.log('üîê Auth request:', req.body);
    try {
        const { user } = req.body;
        
        if (!user) {
            return res.status(400).json({
                success: false,
                error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
            });
        }
        
        const query = `
            INSERT INTO users (id, username, first_name, last_name, photo_url)
            VALUES ($1, $2, $3, $4, $5)
            ON CONFLICT (id) 
            DO UPDATE SET 
                username = EXCLUDED.username,
                first_name = EXCLUDED.first_name, 
                last_name = EXCLUDED.last_name,
                photo_url = EXCLUDED.photo_url,
                updated_at = CURRENT_TIMESTAMP
            RETURNING *
        `;

        const values = [
            user.id,
            user.username || `user_${user.id}`,
            user.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            user.last_name || '',
            user.photo_url || ''
        ];

        const result = await pool.query(query, values);
        
        const userData = {
            ...result.rows[0],
            isAdmin: parseInt(result.rows[0].id) === ADMIN_ID
        };
        
        console.log('‚úÖ User auth success:', userData.id);
        res.json({ 
            success: true, 
            user: userData 
        });
        
    } catch (error) {
        console.error('‚ùå Auth error:', error);
        res.status(500).json({ 
            success: false, 
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + error.message 
        });
    }
});

app.get('/api/user/:userId', async (req, res) => {
    try {
        const result = await pool.query('SELECT * FROM users WHERE id = $1', [req.params.userId]);
        
        if (result.rows.length === 0) {
            return res.json({ 
                success: false, 
                error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
            });
        }
        
        res.json({ 
            success: true, 
            profile: result.rows[0] 
        });
    } catch (error) {
        console.error('Get user error:', error);
        res.status(500).json({ 
            success: false, 
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + error.message
        });
    }
});

// üìù –ü–û–°–¢–´
app.get('/api/posts', async (req, res) => {
    try {
        const result = await pool.query(`
            SELECT p.*, 
                   COALESCE(SUM(CASE WHEN pl.is_like = true THEN 1 ELSE 0 END), 0) as likes,
                   COALESCE(SUM(CASE WHEN pl.is_like = false THEN 1 ELSE 0 END), 0) as dislikes
            FROM posts p
            LEFT JOIN post_likes pl ON p.id = pl.post_id
            GROUP BY p.id
            ORDER BY p.created_at DESC
        `);
        
        const postsWithMoscowTime = result.rows.map(post => ({
            ...post,
            moscow_time: formatMoscowTime(post.created_at)
        }));
        
        res.json({
            success: true,
            posts: postsWithMoscowTime
        });
    } catch (error) {
        console.error('Get posts error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ' + error.message
        });
    }
});

app.post('/api/posts', async (req, res) => {
    try {
        const { title, content, author, authorId, image_url } = req.body;
        
        if (!title || !content || !author) {
            return res.status(400).json({
                success: false,
                error: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è'
            });
        }
        
        if (parseInt(authorId) !== ADMIN_ID) {
            return res.status(403).json({
                success: false,
                error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'
            });
        }
        
        const result = await pool.query(
            `INSERT INTO posts (title, content, author, author_id, is_admin, image_url) 
             VALUES ($1, $2, $3, $4, true, $5) 
             RETURNING *`,
            [title, content, author, authorId, image_url]
        );
        
        res.json({
            success: true,
            message: '–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
            postId: result.rows[0].id
        });
        
    } catch (error) {
        console.error('Create post error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ' + error.message
        });
    }
});

// üìã –ó–ê–î–ê–ù–ò–Ø - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
app.get('/api/tasks', async (req, res) => {
    try {
        const { search, category } = req.query;
        let query = "SELECT * FROM tasks WHERE status = 'active'";
        let params = [];

        if (search) {
            query += " AND (title ILIKE $1 OR description ILIKE $2)";
            params.push(`%${search}%`, `%${search}%`);
        }

        if (category && category !== 'all') {
            const paramIndex = params.length + 1;
            query += ` AND category = $${paramIndex}`;
            params.push(category);
        }

        query += " ORDER BY created_at DESC";

        console.log('üìã Fetching tasks with query:', query, params);
        const result = await pool.query(query, params);
        
        res.json({
            success: true,
            tasks: result.rows
        });
    } catch (error) {
        console.error('‚ùå Get tasks error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π: ' + error.message
        });
    }
});

// üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–Ω–∏—è
app.post('/api/user/tasks/start', async (req, res) => {
    console.log('üöÄ Starting task:', req.body);
    
    const client = await pool.connect();
    
    try {
        await client.query('BEGIN');
        
        const { userId, taskId } = req.body;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (!userId || !taskId) {
            await client.query('ROLLBACK');
            return res.status(400).json({
                success: false,
                error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: userId –∏ taskId'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userCheck = await client.query(
            'SELECT id, username FROM users WHERE id = $1', 
            [userId]
        );
        
        if (userCheck.rows.length === 0) {
            await client.query('ROLLBACK');
            return res.status(404).json({
                success: false,
                error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
        const taskCheck = await client.query(
            'SELECT id, title, price FROM tasks WHERE id = $1 AND status = $2', 
            [taskId, 'active']
        );
        
        if (taskCheck.rows.length === 0) {
            await client.query('ROLLBACK');
            return res.status(404).json({
                success: false,
                error: '–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ
        const existingTask = await client.query(
            `SELECT id, status FROM user_tasks 
             WHERE user_id = $1 AND task_id = $2 
             AND status IN ('active', 'pending_review')`,
            [userId, taskId]
        );
        
        if (existingTask.rows.length > 0) {
            await client.query('ROLLBACK');
            return res.status(400).json({
                success: false,
                error: '–í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ'
            });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const insertResult = await client.query(
            `INSERT INTO user_tasks (user_id, task_id, status, started_at) 
             VALUES ($1, $2, 'active', CURRENT_TIMESTAMP) 
             RETURNING id`,
            [userId, taskId]
        );

        const userTaskId = insertResult.rows[0].id;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await client.query(
            `UPDATE users 
             SET active_tasks = COALESCE(active_tasks, 0) + 1,
                 updated_at = CURRENT_TIMESTAMP 
             WHERE id = $1`,
            [userId]
        );

        await client.query('COMMIT');
        
        console.log(`‚úÖ Task started successfully: user ${userId}, task ${taskId}, userTaskId ${userTaskId}`);
        
        res.json({
            success: true,
            message: '–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç–æ!',
            userTaskId: userTaskId,
            task: taskCheck.rows[0]
        });
        
    } catch (error) {
        await client.query('ROLLBACK');
        console.error('‚ùå Start task error:', error);
        
        // –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
        let errorMessage = '–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–Ω–∏—è';
        
        if (error.code === '23503') { // foreign key violation
            errorMessage = '–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ';
        } else if (error.code === '23505') { // unique violation
            errorMessage = '–ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –Ω–∞—á–∞—Ç–æ';
        }
        
        res.status(500).json({
            success: false,
            error: errorMessage + ': ' + error.message
        });
    } finally {
        client.release();
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/user/:userId/tasks', async (req, res) => {
    try {
        const userId = req.params.userId;
        const { status } = req.query;
        
        let query = `
            SELECT ut.*, t.title, t.description, t.price, t.category, t.task_url
            FROM user_tasks ut 
            JOIN tasks t ON ut.task_id = t.id 
            WHERE ut.user_id = $1
        `;
        let params = [userId];
        
        if (status) {
            query += " AND ut.status = $2";
            params.push(status);
        }
        
        query += " ORDER BY ut.started_at DESC";
        
        const result = await pool.query(query, params);
        
        res.json({
            success: true,
            tasks: result.rows
        });
    } catch (error) {
        console.error('Get user tasks error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π: ' + error.message
        });
    }
});

// üì∏ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∑–∞–¥–∞–Ω–∏—è
app.post('/api/user/tasks/:userTaskId/submit', upload.single('screenshot'), async (req, res) => {
    console.log('üì∏ Submitting screenshot for task:', req.params.userTaskId);
    
    try {
        const userTaskId = req.params.userTaskId;
        const { userId } = req.body;
        
        if (!userId) {
            return res.status(400).json({
                success: false,
                error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
            });
        }
        
        if (!req.file) {
            return res.status(400).json({
                success: false,
                error: '–°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω'
            });
        }
        
        const screenshotUrl = `/uploads/${req.file.filename}`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º user_task
        await pool.query(
            `UPDATE user_tasks SET status = 'pending_review', screenshot_url = $1, submitted_at = CURRENT_TIMESTAMP 
             WHERE id = $2 AND user_id = $3`,
            [screenshotUrl, userTaskId, userId]
        );
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏ –¥–ª—è verification
        const userTaskResult = await pool.query(
            `SELECT ut.user_id, ut.task_id, u.first_name, u.last_name, t.title, t.price 
             FROM user_tasks ut 
             JOIN users u ON ut.user_id = u.id 
             JOIN tasks t ON ut.task_id = t.id 
             WHERE ut.id = $1`, 
            [userTaskId]
        );
        
        if (userTaskResult.rows.length === 0) {
            return res.status(404).json({
                success: false,
                error: '–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
            });
        }
        
        const row = userTaskResult.rows[0];
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ task_verifications
        const userName = `${row.first_name} ${row.last_name || ''}`.trim();
        const verificationResult = await pool.query(
            `INSERT INTO task_verifications (user_task_id, user_id, task_id, user_name, task_title, task_price, screenshot_url) 
             VALUES ($1, $2, $3, $4, $5, $6, $7) 
             RETURNING *`,
            [userTaskId, row.user_id, row.task_id, userName, row.title, row.price, screenshotUrl]
        );
        
        console.log(`‚úÖ Screenshot submitted for verification: ${verificationResult.rows[0].id}`);
        
        res.json({
            success: true,
            message: '–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É',
            verificationId: verificationResult.rows[0].id
        });
        
    } catch (error) {
        console.error('‚ùå Submit task error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏—è: ' + error.message
        });
    }
});

// ‚úÖ –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –ó–ê–î–ê–ù–ò–ô (–ê–î–ú–ò–ù)
app.get('/api/admin/task-verifications', async (req, res) => {
    try {
        const { adminId } = req.query;
        
        if (parseInt(adminId) !== ADMIN_ID) {
            return res.status(403).json({
                success: false,
                error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'
            });
        }

        const result = await pool.query(
            `SELECT tv.*, u.username, u.photo_url 
             FROM task_verifications tv 
             JOIN users u ON tv.user_id = u.id 
             WHERE tv.status = 'pending' 
             ORDER BY tv.submitted_at DESC`
        );
        
        res.json({
            success: true,
            verifications: result.rows
        });
    } catch (error) {
        console.error('Get task verifications error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–π: ' + error.message
        });
    }
});

app.post('/api/admin/task-verifications/:verificationId/approve', async (req, res) => {
    const client = await pool.connect();
    
    try {
        await client.query('BEGIN');

        const verificationId = req.params.verificationId;
        const { adminId } = req.body;
        
        if (parseInt(adminId) !== ADMIN_ID) {
            throw new Error('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
        }

        if (!verificationId || !adminId) {
            throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã');
        }

        console.log(`üîç –û–¥–æ–±—Ä–µ–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${verificationId}`);

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        const verificationResult = await client.query(
            "SELECT * FROM task_verifications WHERE id = $1 FOR UPDATE", 
            [verificationId]
        );
        
        if (verificationResult.rows.length === 0) {
            throw new Error('–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
        
        const verification = verificationResult.rows[0];
        
        if (verification.status !== 'pending') {
            throw new Error(`–ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ. –°—Ç–∞—Ç—É—Å: ${verification.status}`);
        }

        if (!verification.task_price || verification.task_price <= 0) {
            throw new Error('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –∑–∞–¥–∞–Ω–∏—è');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        await client.query(
            `UPDATE task_verifications SET status = 'approved', reviewed_at = CURRENT_TIMESTAMP, reviewed_by = $1 
             WHERE id = $2`, 
            [adminId, verificationId]
        );
        
        // –û–±–Ω–æ–≤–ª—è–µ–º user_task
        await client.query(
            `UPDATE user_tasks SET status = 'completed', completed_at = CURRENT_TIMESTAMP 
             WHERE id = $1`, 
            [verification.user_task_id]
        );
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await client.query(
            `UPDATE users 
             SET balance = COALESCE(balance, 0) + $1, 
                 tasks_completed = COALESCE(tasks_completed, 0) + 1,
                 active_tasks = GREATEST(COALESCE(active_tasks, 0) - 1, 0),
                 experience = COALESCE(experience, 0) + 10,
                 updated_at = CURRENT_TIMESTAMP
             WHERE id = $2`, 
            [verification.task_price, verification.user_id]
        );
        
        await client.query('COMMIT');
        
        console.log(`‚úÖ –ó–∞–¥–∞–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${verification.user_id} –ø–æ–ª—É—á–∏–ª ${verification.task_price} ‚≠ê`);
        
        res.json({
            success: true,
            message: '–ó–∞–¥–∞–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ –∏ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω',
            amountAdded: verification.task_price
        });

    } catch (error) {
        await client.query('ROLLBACK');
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: ' + error.message
        });
    } finally {
        client.release();
    }
});

// üí¨ –°–ò–°–¢–ï–ú–ê –ü–û–î–î–ï–†–ñ–ö–ò (–æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏)
app.get('/api/support/user-chat/:userId', async (req, res) => {
    try {
        const userId = req.params.userId;

        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç
        const chatResult = await pool.query(
            "SELECT * FROM support_chats WHERE user_id = $1 AND is_active = true", 
            [userId]
        );
        
        let chat = chatResult.rows[0];

        if (chat) {
            res.json({
                success: true,
                chat: {
                    ...chat,
                    moscow_time: formatMoscowTimeShort(chat.last_message_time)
                }
            });
        } else {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userResult = await pool.query(
                "SELECT first_name, last_name, username FROM users WHERE id = $1", 
                [userId]
            );
            
            let userName = `User_${userId}`;
            let userUsername = `user_${userId}`;
            
            if (userResult.rows.length > 0) {
                const user = userResult.rows[0];
                userName = `${user.first_name} ${user.last_name || ''}`.trim();
                userUsername = user.username || userUsername;
            }
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
            const newChatResult = await pool.query(
                `INSERT INTO support_chats (user_id, user_name, user_username, last_message, last_message_time) 
                 VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP) 
                 RETURNING *`,
                [userId, userName, userUsername, '–ß–∞—Ç —Å–æ–∑–¥–∞–Ω']
            );
            
            const newChat = newChatResult.rows[0];
            
            // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞
            await pool.query(
                `INSERT INTO support_messages (chat_id, user_id, user_name, message, is_admin, is_read) 
                 VALUES ($1, $2, $3, $4, true, true)`,
                [newChat.id, ADMIN_ID, '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä LinkGold', '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?']
            );
            
            res.json({
                success: true,
                chat: {
                    ...newChat,
                    moscow_time: formatMoscowTimeShort(newChat.last_message_time)
                }
            });
        }
    } catch (error) {
        console.error('Get user chat error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞: ' + error.message
        });
    }
});

// üí≥ –í–´–í–û–î –°–†–ï–î–°–¢–í
app.post('/api/withdrawal/request', async (req, res) => {
    try {
        const { user_id, amount } = req.body;
        
        if (!user_id || !amount) {
            return res.status(400).json({
                success: false,
                error: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è'
            });
        }
        
        const userResult = await pool.query(
            "SELECT * FROM users WHERE id = $1", 
            [user_id]
        );
        
        if (userResult.rows.length === 0) {
            return res.json({ 
                success: false, 
                error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
            });
        }
        
        const user = userResult.rows[0];
        
        if (user.balance < amount) {
            return res.json({ 
                success: false, 
                error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ' 
            });
        }
        
        // –°–æ–∑–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤—ã–≤–æ–¥–∞
        const operationResult = await pool.query(
            `INSERT INTO withdrawal_operations (user_id, username, amount) 
             VALUES ($1, $2, $3) 
             RETURNING *`,
            [user_id, user.username, amount]
        );
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await pool.query(
            "UPDATE users SET balance = balance - $1 WHERE id = $2",
            [amount, user_id]
        );
        
        res.json({ 
            success: true, 
            message: '–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
            operationId: operationResult.rows[0].id,
            newBalance: user.balance - amount
        });
        
    } catch (error) {
        console.error('Withdrawal error:', error);
        res.status(500).json({ 
            success: false, 
            error: '–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤: ' + error.message
        });
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è multer
app.use((error, req, res, next) => {
    if (error instanceof multer.MulterError) {
        if (error.code === 'LIMIT_FILE_SIZE') {
            return res.status(400).json({
                success: false,
                error: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä 10MB.'
            });
        }
    }
    next(error);
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
app.use((error, req, res, next) => {
    console.error('üö® Global error handler:', error);
    res.status(500).json({
        success: false,
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + error.message
    });
});

// –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è HTML
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
    try {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const dbConnected = await testDatabaseConnection();
        
        if (!dbConnected) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ DATABASE_URL.');
            process.exit(1);
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await initDatabase();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        app.listen(PORT, '0.0.0.0', () => {
            console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
            console.log(`üìä Health check: http://localhost:${PORT}/api/health`);
            console.log(`üë§ Admin ID: ${ADMIN_ID}`);
            console.log(`‚è∞ Moscow time: ${getMoscowTime()}`);
            console.log(`üóÑÔ∏è Database: PostgreSQL –Ω–∞ Railway`);
            console.log(`üåê Environment: ${process.env.NODE_ENV || 'development'}`);
        });
        
    } catch (error) {
        console.error('‚ùå Failed to start server:', error);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
startServer();